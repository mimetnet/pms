#!/usr/bin/env python

import os
import sys
import traceback
from optparse import OptionParser

try:
    from lxml import etree as ET 
except:
    raise("Could not lxml. Please install python-lxml")

class Config(OptionParser):
    def __init__(self):
        OptionParser.__init__(self, version='%prog 0.5')
        self.disable_interspersed_args()
        self.add_option('-i', dest='monodoc', help='location of monodox.xml', default='/usr/lib/monodoc/monodoc.xml')
        self.add_option('-s', dest='source', help='location of project.source')
        self.add_option('-o', dest='output', help='where to write modifications', default='-')
        self.add_option('-p', dest='parent', help='install node under this parent/@name')
        self.add_option('-r', dest='remove', help='Remove provider', action='store_true')
        self.parse_args()

def install_tag(source):
    src = source.getchildren()[0]
    return "<node label='%s' name='%s' />" % (src.get('title'), src.get('path'))

def install(base, source, parent=None):
    child = ET.fromstring(install_tag(source))

    if 0 != len(base.xpath('.//node[@name="' + child.get('name') + '"]')):
        print('WARNING: node[@name"%s"] already exists in tree' % (child.get('name')))
        return

    if not parent:
        base.append(child)
        return

    for node in base.xpath('.//node[@name="' + parent + '"]'):
        node.append(child)
        return

    parent = ET.fromstring("<node label='%s' name='%s' />" % (parent, parent))
    parent.append(child)
    base.append(parent)

def uninstall_name(source):
    src = source.getchildren()[0]
    return src.get('path')

def uninstall(base, source):
    for node in base.xpath('.//node[@name="' + uninstall_name(source) + '"]'):
        parent = node.getparent()
        parent.remove(node)
        if 0 == len(parent):
            parent.getparent().remove(parent)

if __name__ == '__main__':
    cfg = Config()

    if cfg.values.source == None:
        cfg.print_help()
        sys.exit(1)

    try:
        root = ET.parse(cfg.values.monodoc)
    except:
        print 'Failed to load', cfg.values.monodoc
        sys.exit(1)

    try:
        source = ET.parse(cfg.values.source)
    except:
        print 'Failed to load', cfg.values.source
        traceback.print_exc()
        sys.exit(1)

    if not cfg.values.remove:
        install(root.getroot(), source.getroot(), cfg.values.parent)
    else:
        uninstall(root.getroot(), source.getroot())

    try:
        if cfg.values.output == '-':
            root.write(sys.stdout, 'utf-8')
        else:
            root.write(cfg.values.output, 'utf-8')
    except:
        print 'Failed to write (%s) %s' % (sys.argv[2], sys.argv[1])
        sys.exit(1)

