#!/usr/bin/env python

import os
import sys
import traceback


try:
	import xml.etree.cElementTree as ET
except:
    try:
        import cElementTree as ET
    except:
        try:
            import elementtree.ElementTree as ET
        except:
            raise("Could not load element tree module. Please install python, python-celementtree, or python-elementtree")


def help(name):
    print 'Usage:', name.split(os.sep).pop(), 'path/to/monodoc.xml [install|uninstall]'

def install_tag():
    if len(sys.argv) == 4:
        return sys.argv[3]
    return "<node label='PMS' name='pms' />"

def install(base):
    if base.get('name') != 'root:':
        print "'%s' doesn't contain expected root node\n    :: <node label='' name='root:'>" % (sys.argv[1])
        sys.exit(1)
    base.append(ET.fromstring(install_tag()))

def uninstall_name():
    if len(sys.argv) == 4:
        return sys.argv[3]
    return 'pms'

def uninstall(base):
    tag = uninstall_name()
    for node in base.findall("node"):
        if tag == node.get('name'):
            base.remove(node)
            break

if __name__ == '__main__':
    if len(sys.argv) < 3:
        help(sys.argv[0])
        sys.exit(1)

    try:
        root = ET.parse(sys.argv[1])
    except:
        print 'Failed to load', sys.argv[1]
        traceback.print_exc()
        sys.exit(1)

    if sys.argv[2] == 'install':
        install(root.getroot())
    elif sys.argv[2] == 'uninstall':
        uninstall(root.getroot())
    else:
        help(sys.argv[0])
        sys.exit(1)

    try:
        root.write(sys.argv[1], 'utf-8')
    except:
        print 'Failed to write (%s) %s' % (sys.argv[2], sys.argv[1])
        sys.exit(1)
